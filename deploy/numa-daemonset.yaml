apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: tcs
  name: oenuma-watch
rules:
- apiGroups: ["resource.sop.huawei.com"]
  resources: ["oenumas", whitelists]
  verbs: ["watch", "get", "update","create"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: oenuma-watch-binding
  namespace: tcs
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: Role
  name: oenuma-watch
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-watch
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list","get","watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-watch-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: pod-watch
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1  
kind: DaemonSet  
metadata:  
  name: numaadj
  labels:  
    app: numaadj
spec:  
  selector:  
    matchLabels:  
      app: numaadj
  template:  
    metadata:  
      labels:  
        app: numaadj
    spec:  
      hostNetwork: true
      volumes:
      - name: vol
        hostPath:
          path: /var/run/nri/nri.sock
      containers:  
      - name: numaadj
        image: hongxuming/nriplugin:latest
        env:
        - name: NRI_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NRI_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: Always
        volumeMounts:
        - name: vol
          mountPath: /var/run/nri/nri.sock
        args: ["-config-namespace", "tcs"]
