/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "numaadj.huawei.com/pkg/apis/resaware/v1alpha1"
)

// OenumaLister helps list Oenumas.
// All objects returned here must be treated as read-only.
type OenumaLister interface {
	// List lists all Oenumas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Oenuma, err error)
	// Oenumas returns an object that can list and get Oenumas.
	Oenumas(namespace string) OenumaNamespaceLister
	OenumaListerExpansion
}

// oenumaLister implements the OenumaLister interface.
type oenumaLister struct {
	indexer cache.Indexer
}

// NewOenumaLister returns a new OenumaLister.
func NewOenumaLister(indexer cache.Indexer) OenumaLister {
	return &oenumaLister{indexer: indexer}
}

// List lists all Oenumas in the indexer.
func (s *oenumaLister) List(selector labels.Selector) (ret []*v1alpha1.Oenuma, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Oenuma))
	})
	return ret, err
}

// Oenumas returns an object that can list and get Oenumas.
func (s *oenumaLister) Oenumas(namespace string) OenumaNamespaceLister {
	return oenumaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OenumaNamespaceLister helps list and get Oenumas.
// All objects returned here must be treated as read-only.
type OenumaNamespaceLister interface {
	// List lists all Oenumas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Oenuma, err error)
	// Get retrieves the Oenuma from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Oenuma, error)
	OenumaNamespaceListerExpansion
}

// oenumaNamespaceLister implements the OenumaNamespaceLister
// interface.
type oenumaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Oenumas in the indexer for a given namespace.
func (s oenumaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Oenuma, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Oenuma))
	})
	return ret, err
}

// Get retrieves the Oenuma from the indexer for a given namespace and name.
func (s oenumaNamespaceLister) Get(name string) (*v1alpha1.Oenuma, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("oenuma"), name)
	}
	return obj.(*v1alpha1.Oenuma), nil
}
